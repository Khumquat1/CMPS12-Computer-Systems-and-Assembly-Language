.ORIG x3000

AND R0, R0, 0 ;CURRENT CHAR
AND R1, R1, 0 ;RESET TEMPS
AND R2, R2, 0 ;RESET TEMPS
AND R3, R3, 0 ;RESET TEMPS
AND R4, R4, 0 ;RESET TEMPS
AND R5, R5, 0 ;RESET TEMPS
AND R6, R6, 0 ;RESET TEMPS
AND R7, R7, 0 ;RESET TEMPS

LEA R0, WELCOMESTR ;LOAD POINTER OF WELCOMESTR
PUTS ;PRINT STRING IN R0

MAINLOOP 
LEA R0, DECISIONSTR ;LOAD POINTER OF DECISIONSTR
PUTS ;PRINT STRING IN R0

MAINGET GETC ;STORE CHAR IN R0
OUT ;OUTPUT CHAR IN R0


AND R5, R5, 0 ;RESET TEMPS
ST R5, CIPHERSUM ;RESET CIPHER

CHECKX 
AND R6, R6, 0 ;RESET R6
ADD R6, R6, R0 ;COPY CHAR INTO R6
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -8 ;R6 -= 8
BRz DONE

CHECKE 
AND R6, R6, 0 ;RESET R6
ADD R6, R6, R0 ;COPY CHAR INTO R6
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -5  ;R6 -= 4
BRz ENCRYPTFLAG

CHECKD 
AND R6, R6, 0 ;RESET R6
ADD R6, R6, R0 ;COPY CHAR INTO R6
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -4  ;R6 -= 4
BRz DECRYPTFLAG

BRnzp MAINGET

DECRYPTFLAG 
AND R1, R1, 0 ;RESET FLAG
ADD R1, R1, 1 ;SET FLAG TO HIGH
ST R1, CIPHERFLAG ;CIPHERFLAG = R1
BRnzp CIPHERSTART

ENCRYPTFLAG 
AND R1, R1, 0 ;RESET FLAG
ADD R1, R1, 0 ;SET FLAG TO LOW
ST R1, CIPHERFLAG ;CIPHERFLAG = R1
BRnzp CIPHERSTART

CIPHERSTART 
LEA R0, CIPHERSTR ;LOAD ADDRESS OF CIPHERSTR
PUTS ;PRINT STRING IN R0

CIPHERLOOP 
GETC ;STORE CHAR IN R0
OUT ;PRINT CHAR IN R0

CHECKCIPHEREND 
AND R6, R6, 0 ;RESET TEMPS
ADD R6, R6, R0 ;COPY CHAR IN R6
ADD R6, R6, -10 ;R6 -= 10
BRz PROMPTSTART

ADDCIPHER 
AND R6, R6, 0 ;RESET TEMPS
ADD R6, R6, R0 ;COPY CHAR IN R6
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -16 ;R6 -= 16
ADD R6, R6, -16 ;R6 -= 16
BRnzp SETUPMULTIPLY ;GO TO LABEL

SETUPMULTIPLY 
AND R4, R4, 0 ;RESET TEMPS
AND R3, R3, 0 ;RESET TEMPS
AND R5, R5, 0 ;RESET TEMPS
AND R2, R2, 0 ;RESET TEMPS
LD R2, CIPHERSUM ;R2 = CIPHERSUM
ADD R3, R3, R2 ;SET R2 = R6 TEMP
ADD R4, R4, 9 ;COUNTER R4 = 9 (LOOP 10 TIMES)

MULTIPLY 
ADD R2, R2, R3 ;ADD (SUM += SUM/10)
ADD R4, R4, -1 ;DECREMENT COUNTER 
BRp MULTIPLY ;JUMP TO LABEL

AND R1, R1, 0 ;RESET TEMPS
ADD R2, R2, R6 ;SUM += R6 (digit)
ST R2, CIPHERSUM ;CIPHERSUM = R2 (x3048)
BRnzp CIPHERLOOP

PROMPTSTART 
AND R5, R5, 0 ;RESET TEMPS
LD R5, CHARCOUNT ;R5 = CHARCOUNT
ADD R5, R5, -1 ;R5 = -1
ST R5, CHARCOUNT ;CHARCOUNT = R5
LEA R0, PROMPTSTR ;LOAD ADDRESS OF POINTER OF PROMPTSTR
PUTS ;PRINT STRING IN R0

PROMPTLOOP 
GETC ;STORE CHAR IN R0
OUT ;PRINT CHAR IN R0
AND R5, R5, 0 ;RESET TEMPS
LD R5, CHARCOUNT ;R5 = CHARCOUNT
ADD R5, R5, 1 ;R5 += 1
ST R5, CHARCOUNT ;CHARCOUNT = R5

CHECKPROMPTEND 
AND R6, R6, 0 ;RESET R6
ADD R6, R6, R0 ;COPY CHAR INTO R6
ADD R6, R6, -10 ;R6 -= 10
BRz PROMPTDONE

STORECHAR 
ST R5, CI ;CI = R5
AND R4, R4, 0 ;RESET TEMPS
ST R4, RI ;RI = R4
ST R0, RETCHAR ;RETCHAR = R0
JSR STORESUB ;GO TO STORESUB

LD R2, CIPHERFLAG ;R2 = CIPHERFLAG
BRz ENCRYPTCHAR ;GO TO ENCRYPT JSR START
BRp DECRYPTCHAR ;GO TO DECRYPT JST START

ENCRYPTCHAR 
JSR ENCRYPTSUB ;GO TO ENCRYPTSUB ROUTINE
BRnzp PROMPTLOOP

DECRYPTCHAR 
JSR DECRYPTSUB ;GO TO DECRYPTSUB ROUTINE
BRnzp PROMPTLOOP

PROMPTDONE 
LEA R0, RESULTSTR ;LOAD POINTER OF RESULTSTR
PUTS ;PRINT STRING IN R0

JSR PRINTSUB ;GO TO PRINTSUB
BRnzp MAINLOOP

DONE 
LEA R0, GOODBYESTR ;LOAD POINTER OF GOODBYESTR
PUTS ;PRINT STRING IN R0

HALT

WELCOMESTR .STRINGZ "Hi\n"
DECISIONSTR .STRINGZ "(E)n/(D)ecrypt or e(X)it\n"
CIPHERSTR .STRINGZ "\nCipher (1-25)\n"
PROMPTSTR .STRINGZ "String (200)\n"
GOODBYESTR .STRINGZ "\nBye\n"
RESULTSTR .STRINGZ "Result"
ENCRYPTSTR .STRINGZ "\n<Encrypted> "
DECRYPTSTR .STRINGZ "\n<Decrypted> "

CIPHERFLAG .BLKW 1
CIPHERSUM .BLKW 1
INVCIPHERSUM .BLKW 1
CHARCOUNT .BLKW 1
RETSAVE .BLKW 1
RETCHAR .BLKW 1
RI .BLKW 1
CI .BLKW 1

TWOH .FILL 199
UPPERSTART .FILL 65
UPPEREND .FILL 90
LOWERSTART .FILL 97
LOWEREND .FILL 122
ALPHAEND .FILL 26

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Store: Takes coordinates (Ri, Ci) and byte of data and stores into the 2D array 
;COORDINATES (Ri, Ci) = (R4, R6)
;(Ri, Ci) = (CIPHERFLAG, CHARCOUNT)
STORESUB 
AND R5, R5, 0 ;RESET TEMPS
AND R3, R3, 0 ;RESET TEMPS
AND R2, R2, 0 ;RESET TEMPS

LD R5, CI ;R5 = CI
LD R0, RI ;R0 = RI

BRp ADD200A
BRnz PASSA

    ADD200A 
        LD R2, TWOH ;R2 = TWOH
        ADD R5, R5, R2 ;R5 += R2
    PASSA
        ;Nothing

LEA R3, ARRAY ;LOAD ADDRESS OF ARRAY POINTER
ADD R3, R3, R5 ;ADD COUNTER TO BASE OF ARRAY
LD R0, RETCHAR ;R0 = RETCHAR
STR R0, R3, 0 ;STORE R0 VALUE AT R3 ADDRESS
RET ;RETURN 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Load: Takes coordinates (Ri, Ci) and loads a byte of data from the 2D array
LOADSUB 
AND R5, R5, 0 ;RESET TEMPS
AND R3, R3, 0 ;RESET TEMPS
AND R2, R2, 0 ;RESET TEMPS

LD R5, CI ;R5 = CI
LD R0, RI ;R0 = RI

BRp ADD200B
BRnz PASSB

    ADD200B 
        LD R2, TWOH ;R2 = TWOH
        ADD R5, R5, R2 ;R5 += R2
    PASSB
        ;Nothing

LEA R3, ARRAY ;LOAD ADDRESS OF ARRAY POINTER
ADD R3, R3, R5 ;ADD COUNTER TO BASE OF ARRAY
LDR R3, R3, 0 ;GET VALUE AT ADDRESS OF R3
ST R3, RETCHAR ;RETCHAR = R3
RET ;RETURN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Encrypt: It takes a character and a cipher as an input and returns the encrypted value
ENCRYPTSUB ;x30FC
ST R7, RETSAVE ;RETSAVE = R7
AND R4, R4, 0 ;RESET TEMPS
ADD R4, R4, 1 ;R4 += 1
ST R4, RI ;RI = R4

AND R1, R1, 0 ;RESET TEMPS
AND R2, R2, 0 ;RESET TEMPS
AND R3, R3, 0 ;RESET TEMPS
AND R4, R4, 0 ;RESET TEMPS
AND R5, R5, 0 ;RESET TEMPS
AND R6, R6, 0 ;RESET TEMPS
AND R7, R7, 0 ;RESET TEMPS

LD R2, UPPERSTART ;R2 = UPPERSTART
LD R3, UPPEREND ;R3 = UPPEREND

NOT R2, R2 ;NOT(R2)
ADD R2, R2, 1 ;R2 += 1

NOT R3, R3 ;NOT(R3)
ADD R3, R3, 1 ;R3 += 1

LD R1, RETCHAR ;R1 = RETCHAR
ADD R5, R1, R2 ; R5 = R1 + R2
BRzp UPPERRANGEMAYBE
BRn STOREFINISH

UPPERRANGEMAYBE
AND R5, R5, 0 ;RESET TEMPS
ADD R5, R1, R3 ;R5 = R1 + R3
BRnz UPPERRANGE
BRp INTERMEDIATERANGE

UPPERRANGE
LD R2, UPPERSTART ;R2 = UPPERSTART
ADD R4, R4, R2 ;R4 += R2
BRnzp ADDROT

INTERMEDIATERANGE
AND R5, R5, 0 ;RESET TEMPS
LD R6, LOWERSTART ;R6 = LOWERSTART
LD R7, LOWEREND ;R7 = LOWEREND

NOT R6, R6 ;NOT(R6)
ADD R6, R6, 1 ;R6 += 1

NOT R7, R7 ;NOT(R7)
ADD R7, R7, 1 ;R7 += 1

ADD R5, R1, R6 ;R5 = R1 + R6
BRzp LOWERRANGEMAYBE
BRn STOREFINISH

LOWERRANGEMAYBE
AND R5, R5, 0 ;RESET TEMPS
ADD R5, R1, R7 ;R5 = R1 + R7
BRnz LOWERRANGE
BRp STOREFINISH

LOWERRANGE
LD R2, LOWERSTART
AND R4, R4, 0 ;RESET TEMPS
ADD R4, R4, R2 ;R4 += R2
BRnzp ADDROT

ADDROT ;x312A
AND R3, R3, 0 ;RESET TEMPS
AND R5, R5, 0 ;RESET TEMPS
AND R6, R6, 0 ;RESET TEMPS
AND R7, R7, 0 ;RESET TEMPS
AND R2, R2, 0 ;RESET TEMPS

LD R7, CIPHERSUM ;R7 = CIPHERSUM
LD R2, ALPHAEND ;R2 = ALPHAEND
NOT R2, R2 ;NOT(R2)
ADD R2, R2, 1 ;R2 += 1

ADD R5, R5, R4 ;R5 += R4

NOT R5, R5 ;NOT(R5)
ADD R5, R5, 1 ;R5 += 1

ADD R3, R1, R5 ;R3 = R1 + R5 ;1-26 VALUE ;;25
ADD R6, R3, R7 ;R6 = R3 + R7 (CIPHER + (1-26 VALUE)) ;;25 + 1 = 26
ADD R5, R6, R2 ;R6 += R2 (CIPHER + 1-26) - 26 ;;26 - 26 = 0 
BRzp FIXROT
BRn FINISHROT

FIXROT
AND R6, R6, 0 ;RESET TEMPS
ADD R6, R5, 0 ;R6 += R5

FINISHROT
AND R0, R0, 0 ;RESET TEMPS
ADD R0, R4, R6 ;R0 = R4 + R6
ST R0, RETCHAR ;RETCHAR = R0

STOREFINISH ;NOTHING
JSR STORESUB
LD R7, RETSAVE ;R7 = RETSAVE
RET ;RETURN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Decrypt: It takes an encrypted character and a cipher and returns the decrypted value
DECRYPTSUB
ST R7, RETSAVE ;RETSAVE = R7
AND R4, R4, 0 ;RESET TEMPS
ADD R4, R4, 1 ;R4 += 1
ST R4, RI ;RI = R4

AND R1, R1, 0 ;RESET TEMPS
AND R2, R2, 0 ;RESET TEMPS
AND R3, R3, 0 ;RESET TEMPS
AND R4, R4, 0 ;RESET TEMPS
AND R5, R5, 0 ;RESET TEMPS
AND R6, R6, 0 ;RESET TEMPS
AND R7, R7, 0 ;RESET TEMPS

LD R2, UPPERSTART ;R2 = UPPERSTART
LD R3, UPPEREND ;R3 = UPPEREND

NOT R2, R2 ;NOT(R2)
ADD R2, R2, 1 ;R2 += 1

NOT R3, R3 ;NOT(R3)
ADD R3, R3, 1 ;R3 += 1

LD R1, RETCHAR ;R1 = RETCHAR
ADD R5, R1, R2 ; R5 = R1 + R2
BRzp UPPERRANGEMAYBEA
BRn STOREFINISHA

UPPERRANGEMAYBEA
AND R5, R5, 0 ;RESET TEMPS
ADD R5, R1, R3 ;R5 = R1 + R3
BRnz UPPERRANGEA
BRp INTERMEDIATERANGEA

UPPERRANGEA
LD R2, UPPERSTART ;R2 = UPPERSTART
ADD R4, R4, R2 ;R4 += R2
BRnzp ADDROTA

INTERMEDIATERANGEA
AND R5, R5, 0 ;RESET TEMPS
LD R6, LOWERSTART ;R6 = LOWERSTART
LD R7, LOWEREND ;R7 = LOWEREND

NOT R6, R6 ;NOT(R6)
ADD R6, R6, 1 ;R6 += 1

NOT R7, R7 ;NOT(R7)
ADD R7, R7, 1 ;R7 += 1

ADD R5, R1, R6 ;R5 = R1 + R6
BRzp LOWERRANGEMAYBEA
BRn STOREFINISHA

LOWERRANGEMAYBEA
AND R5, R5, 0 ;RESET TEMPS
ADD R5, R1, R7 ;R5 = R1 + R7
BRnz LOWERRANGEA
BRp STOREFINISHA

LOWERRANGEA
LD R2, LOWERSTART
AND R4, R4, 0 ;RESET TEMPS
ADD R4, R4, R2 ;R4 += R2
BRnzp ADDROTA

ADDROTA ;x312A
AND R3, R3, 0 ;RESET TEMPS
AND R5, R5, 0 ;RESET TEMPS
AND R6, R6, 0 ;RESET TEMPS
AND R7, R7, 0 ;RESET TEMPS
AND R2, R2, 0 ;RESET TEMPS

LD R7, CIPHERSUM ;R7 = CIPHERSUM
NOT R7, R7 ;NOT(R7)
ADD R7, R7, 1 ;R7 += 1

LD R2, ALPHAEND ;R2 = ALPHAEND
NOT R2, R2 ;NOT(R2)
ADD R2, R2, 1 ;R2 += 1

ADD R5, R5, R4 ;R5 += R4

NOT R5, R5 ;NOT(R5)
ADD R5, R5, 1 ;R5 += 1

ADD R3, R1, R5 ;R3 = R1 + R5 ;1-26 VALUE ;;1
ADD R6, R3, R7 ;R6 = R3 + R7 (CIPHER + (1-26 VALUE)) ;;-20 + 1 = -19
BRn FIXROTA
BRzp FINISHROTA

FIXROTA
LD R2, ALPHAEND ;R2 = ALPHAEND
ADD R6, R6, R2 ;R6 += R2

FINISHROTA
AND R0, R0, 0 ;RESET TEMPS
ADD R0, R4, R6 ;R0 = R4 + R6
ST R0, RETCHAR ;RETCHAR = R0

STOREFINISHA ;NOTHING
JSR STORESUB
LD R7, RETSAVE ;R7 = RETSAVE
RET ;RETURN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Print Array: It prints the 2D array out
PRINTSUB
ST R7, RETSAVE ;RETSAVE = R7

AND R3, R3, 0 ;RESET TEMPS
AND R1, R1, 0 ;RESET TEMPS
AND R5, R5, 0 ;RESET TEMPS
AND R6, R6, 0 ;RESET TEMPS
AND R2, R2, 0 ;RESET TEMPS

LD R5, CIPHERFLAG ;R5 = CIPHERFLAG
BRp ENCLOADA
BRz DECLOADA

ENCLOADA
LEA R0, ENCRYPTSTR ;LOAD ADDRESS OF ENCRYPTSTR POINTER
BRnzp AFTERA

DECLOADA
LEA R0, DECRYPTSTR ;LOAD ADDRESS OF DECRYPTSTR POINTER
BRnzp AFTERA

LD R2, TWOH ;R2 = TWOH
NOT R2, R2 ;NOT(R2)
ADD R2, R2, 1 ;R2 += 1

AFTERA
PUTS ;PRINT STR IN R0

    PRINTLOOPA
    ST R1, RI ;RI = R1
    ST R3, CI ;CI = R3
    JSR LOADSUB
    LD R0, RETCHAR ;R0 = RETCHAR
    OUT ;PRINT CHAR IN R0
    LD R2, TWOH ;R2 = TWOH
    NOT R2, R2 ;NOT(R2)
    ADD R2, R2, 1 ;R2 += 1
    LD R3, CI ;R3 = RI
    ADD R3, R3, 1 ;R3 += 1
    ST R3, CI ;CI = R3
    AND R6, R6, 0 ;RESET TEMPS
    ADD R6, R3, R2 ;R3 + R2 = R6
    BRn PRINTLOOPA

LD R5, CIPHERFLAG ;R5 = CIPHERFLAG
BRp ENCLOADB
BRz DECLOADB

ENCLOADB
LEA R0, DECRYPTSTR ;LOAD ADDRESS OF DECRYPTSTR POINTER
BRnzp AFTERB

DECLOADB
LEA R0, ENCRYPTSTR ;LOAD ADDRESS OF ENCRYPTSTR POINTER
BRnzp AFTERB



ADD R3, R3, 1 ;R3 += 1

AFTERB
PUTS ;PRINT STR IN R0

    PRINTLOOPB
    ST R1, RI ;RI = R1
    ST R3, CI ;CI = R3
    JSR LOADSUB
    LD R0, RETCHAR ;R0 = RETCHAR
    OUT ;PRINT CHAR IN R0
    LD R2, TWOH ;R2 = TWOH
    ADD R2, R2, R2 ;R2 += R2
    NOT R2, R2 ;NOT(R2)
    ADD R2, R2, 1 ;R2 += 1
    LD R3, CI ;R3 = RI
    ADD R3, R3, 1 ;R3 += 1
    ST R3, CI ;CI = R3
    AND R6, R6, 0 ;RESET TEMPS
    ADD R6, R3, R2 ;R3 + R2 = R6
    BRn PRINTLOOPB

AND R0, R0, 0 ;RESET TEMPS
ADD R0, R0, 10 ;R0 += 12
OUT

LD R7, RETSAVE ;R7 = RETSAVE
RET ;GO BACK


ARRAY .BLKW 400

.END